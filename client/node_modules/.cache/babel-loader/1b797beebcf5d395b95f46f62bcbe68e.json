{"ast":null,"code":"var _jsxFileName = \"/home/noura/pull-push1/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }\n})), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n\nfunction formAction(form, url) {\n  function sendMessage(message) {\n    fetch(url, {\n      method: 'POST',\n      body: message\n    });\n  }\n\n  form.onsubmit = function () {\n    let message = form.message.value;\n\n    if (message) {\n      form.message.value = '';\n      sendMessage(message);\n    }\n\n    return false;\n  };\n}\n\nfunction SubscribePane(elem, url) {\n  function showMessage(message) {\n    let messageElem = document.createElement('div');\n    messageElem.append(message);\n    elem.append(messageElem);\n  }\n\n  async function subscribe() {\n    let response = await fetch(url);\n\n    if (response.status == 502) {\n      await subscribe();\n    } else if (response.status != 200) {\n      showMessage(response.statusText);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      await subscribe();\n    } else {\n      let message = await response.text();\n      showMessage(message);\n      await subscribe();\n    }\n  }\n\n  subscribe();\n}\n\nexport default formAction;","map":{"version":3,"sources":["/home/noura/pull-push1/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","render","document","getElementById","unregister","formAction","form","url","sendMessage","message","fetch","method","body","onsubmit","value","SubscribePane","elem","showMessage","messageElem","createElement","append","subscribe","response","status","statusText","Promise","resolve","setTimeout","text"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AAEAF,QAAQ,CAACG,MAAT,eACE,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAOA;AACA;AACA;;AACAH,aAAa,CAACI,UAAd;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,GAA1B,EAA+B;AAE7B,WAASC,WAAT,CAAqBC,OAArB,EAA8B;AAC5BC,IAAAA,KAAK,CAACH,GAAD,EAAM;AACTI,MAAAA,MAAM,EAAE,MADC;AAETC,MAAAA,IAAI,EAAEH;AAFG,KAAN,CAAL;AAID;;AAEDH,EAAAA,IAAI,CAACO,QAAL,GAAgB,YAAW;AACzB,QAAIJ,OAAO,GAAGH,IAAI,CAACG,OAAL,CAAaK,KAA3B;;AACA,QAAIL,OAAJ,EAAa;AACXH,MAAAA,IAAI,CAACG,OAAL,CAAaK,KAAb,GAAqB,EAArB;AACAN,MAAAA,WAAW,CAACC,OAAD,CAAX;AACD;;AACD,WAAO,KAAP;AACD,GAPD;AAQD;;AAED,SAASM,aAAT,CAAuBC,IAAvB,EAA6BT,GAA7B,EAAkC;AAEhC,WAASU,WAAT,CAAqBR,OAArB,EAA8B;AAC5B,QAAIS,WAAW,GAAGhB,QAAQ,CAACiB,aAAT,CAAuB,KAAvB,CAAlB;AACAD,IAAAA,WAAW,CAACE,MAAZ,CAAmBX,OAAnB;AACAO,IAAAA,IAAI,CAACI,MAAL,CAAYF,WAAZ;AACD;;AACD,iBAAeG,SAAf,GAA2B;AACzB,QAAIC,QAAQ,GAAG,MAAMZ,KAAK,CAACH,GAAD,CAA1B;;AAEA,QAAIe,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AAC1B,YAAMF,SAAS,EAAf;AACD,KAFD,MAEO,IAAIC,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AACjCN,MAAAA,WAAW,CAACK,QAAQ,CAACE,UAAV,CAAX;AACA,YAAM,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAjC,CAAN;AACA,YAAML,SAAS,EAAf;AACD,KAJM,MAIA;AACL,UAAIZ,OAAO,GAAG,MAAMa,QAAQ,CAACM,IAAT,EAApB;AACAX,MAAAA,WAAW,CAACR,OAAD,CAAX;AACA,YAAMY,SAAS,EAAf;AACD;AACF;;AAEDA,EAAAA,SAAS;AAEV;;AAED,eAAehB,UAAf","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nfunction formAction(form, url) {\n\n  function sendMessage(message) {\n    fetch(url, {\n      method: 'POST',\n      body: message\n    });\n  }\n\n  form.onsubmit = function() {\n    let message = form.message.value;\n    if (message) {\n      form.message.value = '';\n      sendMessage(message);\n    }\n    return false;\n  };\n}\n\nfunction SubscribePane(elem, url) {\n\n  function showMessage(message) {\n    let messageElem = document.createElement('div');\n    messageElem.append(message);\n    elem.append(messageElem);\n  }\n  async function subscribe() {\n    let response = await fetch(url);\n\n    if (response.status == 502) {\n      await subscribe();\n    } else if (response.status != 200) {\n      showMessage(response.statusText);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      await subscribe();\n    } else {\n      let message = await response.text();\n      showMessage(message);\n      await subscribe();\n    }\n  }\n\n  subscribe();\n\n}\n\nexport default formAction;"]},"metadata":{},"sourceType":"module"}